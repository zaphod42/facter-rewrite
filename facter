#!/usr/bin/env ruby

require 'json'
require 'yaml'
require 'pathname'
require 'open3'

module Facter
  PATH = Pathname.new('facts')

  TYPES = {
    "application/facter-book+json" => lambda { |path, data| Book.new(JSON.parse(data)) },
    "application/facter-index+json" => lambda { |path, data| Index.new(path, JSON.parse(data)) },
    "application/facter-book+yaml" => lambda { |path, data| Book.new(YAML.load(data)) },
    "application/facter-index+yaml" => lambda { |path, data| Index.new(path, YAML.load(data)) },
  }

  module HasFacts
    def include?(name)
      names.include?(name)
    end

    def each_fact(librarian, &block)
      names.each { |name| yield(name, read(librarian, name)) }
    end
  end

  class Book
    include HasFacts

    attr_reader :names

    def initialize(facts)
      @facts = facts
      @names = facts.keys
    end

    def read(librarian, name)
      @facts[name]
    end
  end

  class Index
    include HasFacts

    attr_reader :names

    def initialize(path, index)
      @path = path
      @index = index
      @names = index["provides"]
    end

    def read(librarian, name)
      dependent_values = Hash[@index["depends"].collect { |d| [d, librarian.lookup(d)] }]
      librarian.examine(name, @path, dependent_values)
    end
  end

  class Volume
    NO_VOLUME = Struct.new(:value).new(Book.new({}))

    def initialize(command)
      @command = command
    end

    def start
      @output, input = IO.pipe
      @pid = Kernel.spawn(*@command, { :out => input })
      input.close
      self
    rescue
      NO_VOLUME
    end

    def value
      output = @output.read
      @output.close
      Process.waitpid(@pid)
      interpret(output)
    end

  private

    def interpret(data)
      first_line = data.slice!(0, data.index("\n"))
      first_line.chomp!

      TYPES[first_line].call(@command[0], data)
    end
  end

  class Library
    include Enumerable

    def initialize(path)
      @path = path
    end

    def each(&block)
      @books ||= @path.children.collect do |path| 
        query(path, {})
      end.collect!(&:value)

      @books.each(&block)
    end

    def checkout(path, arguments)
      query(path, arguments).value
    end

  private

    def query(file, arguments)
      command = arguments.inject([file.to_s]) do |options, entry|
        options.push("--#{entry[0]}", scribe(entry[1]))
      end
      Volume.new(command).start
    end

    def scribe(value)
      case value
      when Hash, Array
        JSON.unparse(value)
      else
        value
      end
    end
  end

  class Librarian
    def initialize(library)
      @library = library
      @memory = {}
    end

    def lookup(name)
      if not @memory[name]
        book = @library.find { |book| book.include?(name) }
        @memory[name] = if book.nil?
          nil
        else
          book.read(self, name)
        end
      end

      @memory[name]
    end

    def each_fact(&block)
      @library.each do |book|
        book.each_fact(self, &block)
      end
    end

    def examine(name, in_path, arguments)
      @library.checkout(in_path, arguments).read(self, name)
    end
  end

  class StructuredText
    def initialize
      @data = {}
    end

    def []=(name, value)
      @data[name] = value
    end

    def write_to(stream)
      if @data.length == 1
        stream.puts(@data.values.first)
      else
        @data.keys.sort.each do |name|
          stream.puts("#{name}=#{@data[name]}")
        end
      end
    end
  end
end

library = Facter::Librarian.new(Facter::Library.new(Facter::PATH))

output = Facter::StructuredText.new
if ARGV.empty?
  library.each_fact do |name, value|
    output[name] = value
  end
else
  ARGV.each do |name|
    output[name] = library.lookup(name)
  end
end

output.write_to(STDOUT)
